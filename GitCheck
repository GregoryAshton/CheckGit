#!/usr/bin/env python

"""
Python indicator applet to show the status of batch git

Currently displays a 'tick' if no repositories are ahead of master and an 
upload symbol otherwise.

Icons provided by 

<div>Icons made by <a href="http://www.icons8.com" title="Icons8">Icons8</a> from <a href="http://www.flaticon.com" title="Flaticon">www.flaticon.com</a>         is licensed by <a href="http://creativecommons.org/licenses/by/3.0/" title="Creative Commons BY 3.0">CC BY 3.0</a></div>

"""

# Python 2.7.x standard library imports
import subprocess
import os
import sys
import inspect

sys.tracebacklimit=2

try:
    import pygtk
    pygtk.require('2.0')
    import gobject
    import gtk
except ImportError:
    raise ImportError(
    "The python package gobject required for the batchgit indicator\n"
    "is not installed. To install you may use\n\n"
    "    apt-get install python-gobject\n")
except AssertionError:
    raise ImportError(
    "The python package gtk2 required for the batchgit indicator\n"
    "is not installed. To install you may use\n\n"
    "    apt-get install python-gtk2\n")

try:
    import appindicator
except ImportError:
    raise ImportError(
    "The python package appindicator required for the batchgit indicator\n"
    "is not installed. To install you may use\n\n"
    "    apt-get install python-appindicator\n")


RCFILENAME = ".batchgitrc"
this_dir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))

class AppIndicator:
    def __init__(self, dirs):

        self.dirs = dirs
        self.update_period = 100

        self.ind = appindicator.Indicator("GitCheck", 
                                     "",
                                     appindicator.CATEGORY_APPLICATION_STATUS)

        self.ind.set_status (appindicator.STATUS_ACTIVE)
        self.ind.set_attention_icon ("indicator-messages-new")

        self.IconMenuDictionary = {'ahead' : gtk.STOCK_GO_UP,
                                   'diverged' : gtk.STOCK_REFRESH,
                                   'behind' : gtk.STOCK_GO_DOWN,
                                   'up-to-date' : gtk.STOCK_YES
                                   }
        # create a menu
        menu = gtk.Menu()

        ManualCheck = gtk.MenuItem("Manually update")
        ManualCheck.show()
        ManualCheck.connect("activate", self.SetIconAndMenu)
        menu.append(ManualCheck)

        dirs_items = []
        for dir in self.dirs:
            item = gtk.ImageMenuItem(gtk.STOCK_YES, dir)
            item.show()
            item.set_always_show_image(True)
            menu.append(item)
            dirs_items.append(item)

        self.dirs_items = dirs_items

        quit = gtk.ImageMenuItem(gtk.STOCK_QUIT)
        quit.connect("activate", self.quit)
        quit.set_always_show_image(True)
        quit.show()
        menu.append(quit)

        self.ind.set_menu(menu)

        self.SetIconAndMenu() # Initialise the icon
       
        gobject.timeout_add_seconds(int(self.update_period), self.SetIconAndMenu)
        gtk.threads_init()     

    def CompareWithRemote(self, path):
        path = path.rstrip("/") + "/"

        # Check if there is a remote
        cmd_line = "git --git-dir={}.git --work-tree={} remote update".format(path, path)
        status = subprocess.check_output(cmd_line, shell=True)
        if "ERROR: Repository not found" in status:                
            return None

        cmd_line = "git --git-dir={}.git --work-tree={} status".format(path, path)
        status = subprocess.check_output(cmd_line, shell=True)

        for state in ['ahead', 'diverged', 'behind', 'up-to-date']:
            if state in status:
                return state

    def ModifiedCount(self, path):
        path = path.rstrip("/") + "/"
        cmd_line = "git --git-dir={}.git --work-tree={} ls-files -m".format(path, path)
        output = subprocess.check_output(cmd_line, shell=True)
        modified_files = output.split("\n")
        return len(modified_files) - 1

    def CheckAllDirStatus(self):
        stati = {}
        for (dir, list_item) in zip(self.dirs, self.dirs_items):
            status = {'state_to_origin' : self.CompareWithRemote(dir),
                      'modified' : self.ModifiedCount(dir),
                     }
            stati[dir] = status
                
        return stati
            
    def SetIconAndMenu(self, *args):
        stati = self.CheckAllDirStatus()
         
        # Set the main icon
        if any([dic['state_to_origin']=='ahead' for dic in stati.values()]):
            self.ind.set_icon(gtk.STOCK_GO_UP)
        else:
            self.ind.set_icon(gtk.STOCK_YES)

        # Set individual menu items
        for i, dir_item in enumerate(self.dirs_items):
            dir = self.dirs[i]
            label = str(dir)
            status = stati[dir]

            if status['state_to_origin'] != None:
                img = self.IconMenuDictionary[status['state_to_origin']]
                dir_item.get_image().set_from_stock(img, 
                                                gtk.ICON_SIZE_MENU)
   

                modified_count = stati[dir]['modified']
                if modified_count > 0:
                    label += " +{}".format(modified_count)

                dir_item.set_label(label)

        return True
            

    def quit(self, widget, data=None):
        gtk.main_quit()

if __name__ == "__main__":

    rcfile = os.path.expanduser("~") + "/" + RCFILENAME
    if os.path.isfile(rcfile):
        dirs = []
        with open(rcfile, "r") as f:
            for line in f:
                dirs.append(line.rstrip("\n"))

        indicator = AppIndicator(dirs)

        gtk.main()
    


